
user  root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    lua_package_path '/root/work/GitHub/nginx-multi-disk/?.lua;;';

    init_worker_by_lua '
        local multidir = require("resty.multidir")
        multidir.init({["/data/disk01"]=2, ["/data/disk02"]=1}, "/data/cache")
    ';

    server {
        listen       80;
        server_name  localhost;    
        # 获取文件存储目录，写文件时用到
        location = /getsavedir {
            set_by_lua $root_dir '
                if ngx.var.arg_url == nil or ngx.var.arg_url == "" then
                    return ""
                end
                local multidir = require "resty.multidir"
                local url = ngx.var.arg_url or ""
                local root_dir, x_cache = multidir.get_path_by_uri(url)
                ngx.header["X-Cache"] = x_cache
                ngx.log(ngx.INFO, "set root_dir:", root_dir)
                return root_dir                
            ';
            root $root_dir;

            content_by_lua '                
                local url = ngx.var.arg_url or ""
                ngx.say(ngx.var.document_root .. url)
            ';
        }

        # 下载文件
        location / {
            set_by_lua $root_dir '
                local multidir = require "resty.multidir"
                local root_dir, x_cache = multidir.get_path_by_uri(ngx.var.uri)
                ngx.header["X-Cache"] = x_cache
                ngx.log(ngx.INFO, "set root_dir:", root_dir)
                return root_dir                
            ';
            root $root_dir;
        }
    }
}
